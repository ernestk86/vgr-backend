---
- name: Cluster Setup
  hosts: localhost
  gather_facts: false
  connection: local
  collections:
    - kubernetes.core
  tasks:
    - name: Create vgr-backend secret
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/forbidden/vgr-backend-creds.yml

    - name: Add Nginx repository
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    - name: Deploy latest version of Nginx chart
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: default
        update_repo_cache: true
        values:
          replicas: 1

    - name: Get an existing Service object
      kubernetes.core.k8s_info:
        kind: Service
        name: ingress-nginx-controller
        namespace: default
      register: NGINX

    - name: Add Grafana repository
      kubernetes.core.helm_repository:
        name: grafana
        repo_url: https://grafana.github.io/helm-charts

    - name: Deploy latest version of Grafana chart with values
      kubernetes.core.helm:
        name: grafana
        chart_ref: grafana/grafana
        release_namespace: default
        update_repo_cache: true
        values_files:
          - /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/grafana-values.yml
    
    - name: Pause for 1 minute to allow Grafana to start up
      pause:
        minutes: 1
        prompt: "Next step is to create Grafana ingress, needs to make sure Grafana service is started up or else runs into error."
    
    - name: Create Grafana ingress
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/grafana-ingress.yml
    
    - name: Create canary deployment
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/vgr-backend_canary_deploy.yml
    
    - name: Create canary service
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/vgr-backend_canary_svc.yml

    - name: Create canary ingress
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/vgr-backend_canary_ingress.yml

    - name: Create production deployment
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/vgr-backend_prod_deploy.yml
    
    - name: Create production service
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/vgr-backend_prod_svc.yml

    - name: Create production ingress
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/vgr-backend_prod_ingress.yml

    - name: Download Prometheus Operator deployment manifest
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/master/bundle.yaml
        dest: ~/bundle.yaml
        mode: '0664'

    - name: Deploy Prometheus Operator
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: ~/bundle.yaml

    - name: Configure Prometheus RBAC Permissions
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/prom_rbac.yml

    - name: Deploy Prometheus
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/prometheus.yml

    - name: Prometheus Service
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/prom_svc.yml

    - name: Deploy Prometheus Service Monitor
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/prometheus_servicemonitor.yml
    
    - name: Get Prometheus service object
      kubernetes.core.k8s_info:
        kind: Service
        name: prometheus
        namespace: default
      register: PROM_SVC

    - name: Set Prometheus Data Source
      community.grafana.grafana_datasource:
        ds_type: "prometheus"
        ds_url: "{{PROM_SVC.resources[0].spec.clusterIP}}:9090"
        name: "Prometheus"
        url: "http://{{ NGINX.resources[0].status.loadBalancer.ingress[0].ip }}/grafana"
        url_username: "{{GRAFANA_USER.stdout}}"
        url_password: "{{GRAFANA_PASSWORD.stdout}}"    

    - name: Set Loki Data Source
      community.grafana.grafana_datasource:
        ds_type: "loki"
        ds_url: "https://logs-prod-us-central1.grafana.net"
        name: "grafanacloud-ernestk86-logs"
        basic_auth_user: "58910"
        basic_auth_password: "{{LOKI_PASSWORD.stdout}}"
        url: "http://{{ NGINX.resources[0].status.loadBalancer.ingress[0].ip }}/grafana"
        url_username: "{{GRAFANA_USER.stdout}}"
        url_password: "{{GRAFANA_PASSWORD.stdout}}"
    
    - name: Add Dashboard to Grafana
      community.grafana.grafana_dashboard:
        grafana_url: http://{{ NGINX.resources[0].status.loadBalancer.ingress[0].ip }}/grafana
        url_username: "{{GRAFANA_USER.stdout}}"
        url_password: "{{GRAFANA_PASSWORD.stdout}}"
        path: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/vgr-backend_dashboard.json
        state: present

    - name: Add Prometheus-Community repository
      kubernetes.core.helm_repository:
        name: prometheus-community
        repo_url: https://prometheus-community.github.io/helm-charts

    - name: Deploy latest version of Alertmanager chart with values
      kubernetes.core.helm:
        name: alertmanager
        chart_ref: prometheus-community/alertmanager
        release_namespace: default
        update_repo_cache: true
        values_files:
          - /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/alertsmanager-values.yml
    
    - name: Pause for 1 minute to allow Alertmanager to start up
      pause:
        minutes: 1
        prompt: "Next step is to create Alertmanager ingress, needs to make sure Alertmanager service is started up or else runs into error."
    
    - name: Create Alertmanager ingress
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/alertsmanager-ingress.yml
    
    - name: Create Prometheus Rules
      kubernetes.core.k8s:
        namespace: default
        state: present
        src: /mnt/c/users/ernes/desktop/ernie_work/vgr-backend/manifests/prometheus-rules.yml    

- name: Set NGINX endpoint for Jenkins
  hosts: vgrbackend
  gather_facts: false
  become: true
  tasks:
    - name: Add NGINX variable
      community.general.jenkins_script:
        user: admin
        password: "{{ADMIN_PASSWORD.stdout}}"
        script: |
          import jenkins.*
          import jenkins.model.*
          import hudson.*
          import hudson.model.*
          instance = Jenkins.getInstance()
          globalNodeProperties = instance.getGlobalNodeProperties()
          envVarsNodePropertyList = globalNodeProperties.getAll(hudson.slaves.EnvironmentVariablesNodeProperty.class)
          envVars = envVarsNodePropertyList.get(0).getEnvVars()  
          envVars.put("NGINX_ENDPOINT", "{{ hostvars['localhost'].NGINX.resources[0].status.loadBalancer.ingress[0].ip }}")
          instance.save()